        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <time.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:
        -:   12:#define MAX_TESTS 10000
        -:   13:
function main called 1 returned 100% blocks executed 85%
        1:   14:int main() {
        -:   15:
        1:   16:	int n[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:	int i, j, players, player, seed, errors = 0;
        -:   18:	struct gameState GS;
        -:   19:	struct gameState tempState; 
        1:   20:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   21:	printf("Beginning of Random Card Test: Village\n"); // card not refactored in Assignment 3
call    0 returned 100%
    10001:   22:	for (i = 0; i < MAX_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   23:		do {
    19846:   24:			players = rand() % 4;
call    0 returned 100%
    19846:   25:		} while (players < 2);
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   26:
    10000:   27:		seed = rand();		// random seed
call    0 returned 100%
    10000:   28:		initializeGame(players, n, seed, &GS);	//initialize Gamestate 
call    0 returned 100%
        -:   29:
        -:   30:		do {
    17558:   31:			player = rand() % players; 
call    0 returned 100%
    17558:   32:		} while (player == 0);	
branch  0 taken 43%
branch  1 taken 57% (fallthrough)
        -:   33:
        -:   34:		// initiate GS vars
    10000:   35:		GS.whoseTurn = player;
    10000:   36:		GS.deckCount[player] = rand() % MAX_DECK; // random deck size
call    0 returned 100%
    10000:   37:		GS.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
    10000:   38:		GS.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
    10000:   39:		GS.hand[player][0] = village;
    10000:   40:		GS.numActions = rand() % 10; 
call    0 returned 100%
    10000:   41:		memcpy(&tempState, &GS, sizeof(struct gameState));
    10000:   42:		j = cardEffect(village, 0, 0, 0, &GS, 0, 0);		// run card
call    0 returned 100%
    10000:   43:		if (j == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   44:		if (GS.deckCount[player] != (tempState.deckCount[player] - 1)) { errors++; }
branch  0 never executed
branch  1 never executed
    #####:   45:		if (GS.numActions != (tempState.numActions + 2)) { errors++; }		// village card = +2 actions
branch  0 never executed
branch  1 never executed
        -:   46:		}
        -:   47:	}	
        1:   48:	printf("Errors: %d\n", errors);
call    0 returned 100%
        1:   49:	printf("End of Random Card Test: Village\n");
call    0 returned 100%
        1:   50:	return 0;
        -:   51:}
