        -:    0:Source:randomtestadventurer.c
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#define NUM_TESTS 10
        -:   11:#define CARD_COUNT treasure_map
        -:   12:
function main called 1 returned 0% blocks executed 64%
        1:   13:int main(){
        -:   14:	
        -:   15:	int i,j, player_count, player, seed, deck_treasures, hand_count, pre_count , post_count;
        1:   16:	int n[10] = {curse,estate,duchy,province,copper,baron, smithy, treasure_map, minion, steward};
        1:   17:	srand(time(NULL));   
call    0 returned 100%
call    1 returned 100%
        -:   18:	struct gameState GS;
        -:   19:	
        1:   20:	printf("Beginning of Random Test: Adventurer\n");	//refactored in assignment 3 (manditory test for assignment 4)
call    0 returned 100%
        -:   21:	//Loop
        1:   22:	for(i = 0;i < NUM_TESTS; i++){ 
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        1:   23:		pre_count = 0; post_count = 0;
        1:   24:  		player_count = rand() % 3 + 2;
call    0 returned 100%
        1:   25:		seed = rand() % 100;	
call    0 returned 100%
        -:   26:		//when game initialized:
        1:   27:		if(initializeGame(player_count, n, seed, &GS) == -1){ 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   28:			printf("Error with initialization\n");
call    0 never executed
    #####:   29:			exit(0);
call    0 never executed
        -:   30:		}
        -:   31:		// random player
        1:   32:		player = rand() % player_count; 
call    0 returned 100%
        1:   33:		GS.whoseTurn = player;
        1:   34:		GS.numActions = 1;
        1:   35:		GS.handCount[player] = 5;
        1:   36:		GS.deckCount[player] = rand() % MAX_HAND;
call    0 returned 100%
        1:   37:		GS.discardCount[player] = 0;
        -:   38:		
        -:   39:		//random deck
      252:   40:		for(j = 0; j < GS.deckCount[player]; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      251:   41:			GS.deck[player][j] = rand() % CARD_COUNT;
call    0 returned 100%
      251:   42:			if(GS.deck[player][j] >= copper && GS.deck[player][j] <= gold){ 
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
       30:   43:				deck_treasures++;
        -:   44:			}
        -:   45:		}
        -:   46:		//random hand
        6:   47:		for(j = 0; j < GS.handCount[player]; j++){	
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   48:			GS.hand[player][j] = rand() % CARD_COUNT;
call    0 returned 100%
        5:   49:			if(GS.hand[player][j] >= copper && GS.hand[player][j] <= gold){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        1:   50:				pre_count++;	}
        -:   51:		}
        -:   52:	
        1:   53:		GS.hand[player][0] = adventurer; 
        1:   54:		hand_count = GS.handCount[player];
        1:   55:		playCard(0, 0, 0, 0, &GS); 
call    0 returned 100%
        -:   56:		//2 cards added to hand
        1:   57:		if(hand_count + 2 != GS.handCount[player]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   58:			printf("Error! Can't add 2 cards to the player's hand\n");
call    0 returned 100%
        1:   59:			exit(0);	
call    0 returned 0%
        -:   60:		}
        -:   61:		
    #####:   62:		for(j = 0; j < GS.handCount[player]; j++){
branch  0 never executed
branch  1 never executed
    #####:   63:			if(GS.hand[player][j] >= copper && GS.hand[player][j] <= gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   64:					post_count++;
        -:   65:		}
    #####:   66:		printf("Pre Count: %d\n", pre_count);
call    0 never executed
    #####:   67:		printf("Post Count: %d\n", post_count);
call    0 never executed
        -:   68:		
    #####:   69:		if(pre_count + 2 != post_count){
branch  0 never executed
branch  1 never executed
    #####:   70:			printf("Error! Can't add 2 cards to the player's hand\n");
call    0 never executed
    #####:   71:			exit(0);	
call    0 never executed
        -:   72:		}
    #####:   73:		printf("Iteration #%d: \n", i);
call    0 never executed
        -:   74:		
        -:   75:	}
    #####:   76:	printf("End of Random Test: Adventurer\n");	
call    0 never executed
    #####:   77:	return 0;
        -:   78:}
        -:   79:
