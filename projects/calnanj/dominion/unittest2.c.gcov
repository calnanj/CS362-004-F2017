        -:    0:Source:unittest2.c
        -:    0:Programs:4
        -:    1:/// Jessica Calnan
        -:    2:/// CS 362 Fall 2017
        -:    3:/// Assignment 3 Due 10/22/17
        -:    4:/// Unit Test: Update Coins
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <math.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <assert.h>
        -:   14:	
function main called 2 returned 100% blocks executed 86%
        2:   15:int main (int argc, char** argv)	//argument count and num arguments passed to function
        -:   16:{
        -:   17:	struct gameState GS;
        2:   18:	GS.coins = 0;
        -:   19:	
        2:   20:	printf("\nBegin Testing: Update Coins\n"); //message that testing has begun
call    0 returned 100%
        -:   21:	
        -:   22:	//must test all three coin types (silver, gold, copper)
        -:   23:		
        -:   24:	//begin coin cards tests
        2:   25:	printf("\nThen, we will test gold coins\n");
call    0 returned 100%
        2:   26:	GS.hand[0][0] = gold;
        2:   27:	GS.hand[0][1] = gold;
        2:   28:	GS.hand[0][2] = gold;
        2:   29:	GS.hand[0][3] = gold;
        2:   30:	GS.hand[0][4] = gold;
        2:   31:	GS.hand[0][5] = gold;
        2:   32:	GS.hand[0][6] = gold;
        2:   33:	GS.hand[0][7] = gold;
        2:   34:	GS.hand[0][8] = gold;
        2:   35:	GS.hand[0][9] = gold;
        2:   36:	updateCoins(0,&GS, 0);
call    0 returned 100%
        2:   37:	printf("\nThere should be 10 gold coins: %d\n", GS.coins);
call    0 returned 100%
        2:   38:	if(GS.coins == 10)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:		printf("\nPass\n"); //did the test pass?
call    0 never executed
        -:   40:	else
        2:   41:		printf("\nFail\n");
call    0 returned 100%
        -:   42:	
        2:   43:	printf("\nNext, we will test silver coins\n");
call    0 returned 100%
        2:   44:	GS.hand[0][0] = silver;
        2:   45:	GS.hand[0][1] = silver;
        2:   46:	GS.hand[0][2] = silver;
        2:   47:	GS.hand[0][3] = silver;
        2:   48:	GS.hand[0][4] = silver;
        2:   49:	GS.hand[0][5] = silver;
        2:   50:	GS.hand[0][6] = silver;
        2:   51:	GS.hand[0][7] = silver;
        2:   52:	GS.hand[0][8] = silver;
        2:   53:	GS.hand[0][9] = silver;
        2:   54:	updateCoins(0,&GS, 0);
call    0 returned 100%
        2:   55:	printf("\nThere should be 10 silver coins: %d\n", GS.coins);
call    0 returned 100%
        2:   56:	if(GS.coins == 20)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   57:		printf("\nPass\n"); //did the test pass?
call    0 never executed
        -:   58:	else
        2:   59:		printf("\nFail\n");
call    0 returned 100%
        -:   60:	
        2:   61:	printf("\nFinally, we will test copper coins\n");
call    0 returned 100%
        2:   62:	GS.hand[0][1] = gold;
        2:   63:	GS.hand[0][2] = gold;
        2:   64:	GS.hand[0][3] = gold;
        2:   65:	GS.hand[0][4] = gold;
        2:   66:	GS.hand[0][5] = gold;
        2:   67:	GS.hand[0][6] = gold;
        2:   68:	GS.hand[0][7] = gold;
        2:   69:	GS.hand[0][8] = gold;
        2:   70:	GS.hand[0][9] = gold;
        2:   71:	updateCoins(0,&GS, 0);
call    0 returned 100%
        2:   72:	printf("\nThere should be 10 gold coins: %d\n", GS.coins);
call    0 returned 100%
        2:   73:	if(GS.coins == 30)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("\nPass\n"); //did the test pass?
call    0 never executed
        -:   75:	else
        2:   76:		printf("\nFail\n");
call    0 returned 100%
        -:   77:
        -:   78://must test that another card (not a coin card) will yield zero coins
        2:   79:  printf("\nWe will start by testing zero coins\n");
call    0 returned 100%
        2:   80:        GS.hand[0][1] = smithy;
        2:   81:        GS.hand[0][2] = smithy;
        2:   82:        GS.hand[0][3] = smithy;
        2:   83:        GS.hand[0][4] = smithy;
        2:   84:        GS.hand[0][5] = smithy;
        2:   85:        GS.hand[0][6] = smithy;
        2:   86:        GS.hand[0][7] = smithy;
        2:   87:        GS.hand[0][8] = smithy;
        2:   88:        GS.hand[0][9] = smithy;
        2:   89:        updateCoins(0,&GS, 0);
call    0 returned 100%
        2:   90:        printf("\nWe should have no coins: %d\n", GS.coins);
call    0 returned 100%
        2:   91:        if(GS.coins == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   92:                printf("\nPass");
call    0 returned 100%
        -:   93:        else
    #####:   94:                printf("\nFail");
call    0 never executed
        -:   95:  	
        -:   96:
        2:   97:	printf("\nEnd of Test: Update Coins******\n"); //message that testing has ended
call    0 returned 100%
        -:   98:
        2:   99:	return 0; //exit
        -:  100:}
